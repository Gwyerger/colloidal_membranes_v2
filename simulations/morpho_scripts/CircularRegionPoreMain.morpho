// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import optimize4
import vtk
import functionals

// Theoretical Parameters

// var Ksplay = 1
// var Kbend = 1
// var Ktwist = 1
var K = 1
var C = 2
var lamt = sqrt(K/C)
var qstar = 0.6
var gstar = 0.2
var pstar = 0.05

// Region Dimensions
var dx = 0.15/lamt
var Ro = 5/lamt
var Rp = 0.75/lamt


// Import/Export Destination

var pathexport = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/Circular/q=${qstar} r=${Rp}"
var initialmeshpath = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/Circular"

// --------------------------------------------------


fn modulus(a, b){
    return (a/b - floor(a/b))*b
}

fn CreateSelections(mesh, Router, Rpore, Grain) {

    var bnds = Selection(mesh, boundary=true)
    bnds.addgrade(0)

    var porebnd = bnds.intersection(Selection(mesh, fn(x,y,z) (x^2 + y^2 + z^2) < (Rpore + Grain)^2))
    var outerbnd = bnds.intersection(Selection(mesh, fn(x,y,z) (x^2 + y^2 + z^2) > (Router - Grain)^2))

    porebnd.addgrade(1)
    outerbnd.addgrade(1) 
  
    
    return [bnds, outerbnd, porebnd]
}

 // //Initialize a field
fn AddNematicFieldEnergy(mesh, problem, K, q, C) {
    var nn = Field(mesh, fn(x,y,z)  Matrix([0,0,1])) 
    var nem = Nematic(nn, ksplay = K, ktwist = K, kbend = K, pitch = q)
    problem.addenergy(nem)
    return [nn, nem]
}

// For restricting the X-component locally
//class XCompSquared {
//    init(vec) {
//        self.vec = vec
//    }
//    integrand(vec) {
//        var intg = vec.op(fn (x) x[0]^2)
//        return intg.linearize().transpose()
//    }
//
//    fieldgradient(vec, mesh) {
//        // print vec
//        var fg = vec.op(fn (x) Matrix([2*x[0], 0, 0]))
//        return fg
//    }
//
//    total(vec) {
//        return self.integrand(vec).sum()
//    }  
//}
// For restricting the Y-component locally
//class YCompSquared {
//    init(vec) {
//        self.vec = vec
//    }
//    integrand(vec) {
//        var intg = vec.op(fn (x) x[1]^2)
//        return intg.linearize().transpose()
//    }
//
//    fieldgradient(vec, mesh) {
//        // print vec
//        var fg = vec.op(fn (x) Matrix([0, 2*x[1], 0]))
//        return fg
//    }
//
//    total(vec) {
//        return self.integrand(vec).sum()
//    }  
//}
// For restricting the Z-component locally
//class ZCompSquared {
//    init(vec) {
//        self.vec = vec
//    }
//    integrand(vec) {
//        var intg = vec.op(fn (x) x[2]^2)
//        return intg.linearize().transpose()
//    }
//
//    fieldgradient(vec, mesh) {
//        // print vec
//        var fg = vec.op(fn (x) Matrix([0,0, 2*x[2]]))
//        return fg
//    }
//
//    total(vec) {
//        return self.integrand(vec).sum()
//    }  
//}
//
// Add a tilt energy functional C/2*sin^2(theta)

fn tIntegrand(x, n) {                   
    return (1-(n[2])^2)
}

fn AddTiltEnergy(problem, nn, C) {
    var tilt = AreaIntegral(tIntegrand, nn) 
    problem.addenergy(tilt, prefactor = C/2)
}

fn lIntegrand(x, n){
    return (1)
}

// Add an anisotropic line tension functional
// fn lIntegrand(x, n){
//     return (1 + (1 - n.inner(tangent())^2))
// }

fn AddEdgeEnergy(problem, sel, nn, g) {
    var lten = LineIntegral(lIntegrand, nn)
    problem.addenergy(lten, selection=sel, prefactor = g)
}

fn AddPressure(problem, f) {
    problem.addenergy(Area(), prefactor=(-f))
}

fn addouterconstraint(problem, bnd, field){    

    var xcon = LineIntegral(fn (x, n) n[0]^2, field)
    var ycon = LineIntegral(fn (x, n) n[1]^2, field)
    var zcon = LineIntegral(fn (x, n) n[2]^2, field)

    var xcons = Constraint(xcon, 0)
    var ycons = Constraint(ycon, 0)

    xcons.selection = bnd
    xcons.field = field
    xcons.prefactor = 1
    xcons.onesided = false
    problem.constraints.append(xcons)

    ycons.selection = bnd
    ycons.field = field
    ycons.prefactor = 1
    ycons.onesided = false
    problem.constraints.append(ycons)
}

fn AddConstraints(problem, reg, mesh, bnds, porebnd, outerbnd, Router, nn) {

    // Add a level set to keep things in the z axis

    var lcons = ScalarPotential(fn (x,y,z) z)    
    problem.addlocalconstraint(lcons)
    reg.addlocalconstraint(lcons)  


    // Add level set to outerbnd

    var outerconst = ScalarPotential(fn (x,y,z) (x^2 + y^2 - Router^2))
    problem.addlocalconstraint(outerconst, selection = outerbnd, target = 0)    
    
    // Add a constraint on nx on top and bottom walls

    addouterconstraint(problem, outerbnd, nn)

    // Unit vector constraint 

    var lnorm = NormSq(nn)                      
    problem.addlocalconstraint(lnorm, field=nn, target=1) 
}



fn CreateOptimizers(problem, reg, mesh, outerbnd, porebnd, nn) {

    
    // Create Problem Adapter and Controller    

    var adapt = ProblemAdapter(problem, mesh, nn)     
    var control = PenaltyController(adapt, verbosity="normal")
    control.ctol = 1e-6


    var leq = EquiElement() 
    reg.addenergy(leq, prefactor = 1)         
    var ropt = ShapeOptimizer(reg, mesh)
    ropt.steplimit = 0.05
    ropt.stepsize = 0.01
    ropt.steplimit = 0.05
    ropt.fix(porebnd)
    ropt.fix(outerbnd)

    ropt.quiet=false

    return [control, ropt]
}

fn Optimization(str, mesh, nn, control, ropt, sel=nil) {
    var iterations = 30
    var vtkE = VTKExporter(nn)
    var h = 0
    vtkE.export("${pathexport}/${str}_${h}.vtk")
    var Break = false
//    var A = Area()

    for (i in 0...iterations) {
//        if (A.total(mesh) > Lreg*Hreg){break}
            print("optimizing: step ${h+1}/${iterations}")
            ropt.conjugategradient(5)
            equiangulate(mesh, quiet=false, fix=sel)
            control.optimize(1)
            h=h+1
            vtkE.export("${pathexport}/${str}_${h}.vtk")
            if (control.hasConverged()) {
                print("Convergence Achieved")
                break                
            }
    }
}



var str = "CircularPoreg${gstar}p${pstar}q${qstar}"
var vtkMI = VTKImporter(String(initialmeshpath,"/InitialMeshCircularRp${Rp}.vtk"))
var mesh = vtkMI.mesh()


var Selections = CreateSelections(mesh, Ro, Rp, dx)
var bnds = Selections[0], porebnd = Selections[2], outerbnd = Selections[1]

var problem = OptimizationProblem(mesh)
var reg = OptimizationProblem(mesh) 

var fe = AddNematicFieldEnergy(mesh, problem, 1, qstar, 1)
var nn = fe[0], nem = fe[1]
AddTiltEnergy(problem, nn, 1)
AddEdgeEnergy(problem, porebnd, nn, gstar)
//AddPressure(problem, pstar)
AddConstraints(problem, reg, mesh, bnds, porebnd, outerbnd, Ro, nn)
problem.addenergy(EquiElement(), prefactor=0.02)
var Optimizers = CreateOptimizers(problem, reg, mesh, outerbnd, porebnd, nn)
var control = Optimizers[0], ropt = Optimizers[1]

Optimization(str, mesh, nn, control, ropt)

Show(plotmesh(mesh, grade = [0,1,2]))




