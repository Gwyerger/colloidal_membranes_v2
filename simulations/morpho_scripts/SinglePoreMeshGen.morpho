// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import optimize4
import vtk
import functionals

// Region Dimensions
var K = 1
var C = 4
var lamt = sqrt(K/C)
var dx = 0.15/lamt
var Hreg = 4/lamt
var Lreg = 12/lamt
var Rp = 0.75/lamt


// Import/Export Destination

var pathexport = "/home/gabriel/Repositories/colloidal_membranes_v2/vtk_results/round9C=4"


// --------------------------------------------------

fn CreateAndSaveMesh(Lregion, Hregion, Rpore, Grain, str){
    if (Rpore > 0){
        var hs0 = HalfSpaceDomain(Matrix([0,Hregion]), Matrix([0,1]))
        var hs1 = hs0.difference(HalfSpaceDomain(Matrix([0,Hregion/2]), Matrix([0,-1])))
        var hs2 = hs1.difference(HalfSpaceDomain(Matrix([0,-Hregion/2]), Matrix([0,1])))
        var hs3 = hs2.difference(HalfSpaceDomain(Matrix([Lregion/2,0]), Matrix([-1,0])))
        var rect = hs3.difference(HalfSpaceDomain(Matrix([-Lregion/2,0]), Matrix([1,0])))
        var pore = CircularDomain(Matrix([0,0]), Rpore+0.001)
        var dom = rect.difference(pore)
        var mg = MeshGen(dom, [-Lregion/2..Lregion/2:Grain, -Hregion/2..Hregion/2+0.01:Grain], quiet=false)
        var meshe = mg.build()
        var mesh = ChangeMeshDimension(meshe, 3)
        mesh.addgrade(1)
        mesh.addgrade(2)
        var vtkME = VTKExporter(mesh)
        vtkME.export(String(pathexport,"/",str,".vtk"))
        return mesh
    }
    if (Rpore = 0) {
        var hs0 = HalfSpaceDomain(Matrix([0,Hregion]), Matrix([0,1]))
        var hs1 = hs0.difference(HalfSpaceDomain(Matrix([0,Hregion/2]), Matrix([0,-1])))
        var hs2 = hs1.difference(HalfSpaceDomain(Matrix([0,-Hregion/2]), Matrix([0,1])))
        var hs3 = hs2.difference(HalfSpaceDomain(Matrix([Lregion/2,0]), Matrix([-1,0])))
        var rect = hs3.difference(HalfSpaceDomain(Matrix([-Lregion/2,0]), Matrix([1,0])))
        var mg = MeshGen(rect, [-Lregion/2..Lregion/2:Grain, -Hregion/2..Hregion/2+0.01:Grain], quiet=false)
        var meshe = mg.build()
        var mesh = ChangeMeshDimension(meshe, 3)
        mesh.addgrade(1)
        mesh.addgrade(2)
        var vtkME = VTKExporter(mesh)
        vtkME.export(String(pathexport,"/",str,".vtk"))
        return mesh
    }
}

fn AddConnectionsToMesh(mesh, sel1, sel2) {
    var idlist1 = Matrix(sel1.idlistforgrade(0))
    var idlist2 = Matrix(sel2.idlistforgrade(0))

    var vert = mesh.vertexmatrix()
    var dim = vert.dimensions()[0]
    var nv = vert.dimensions()[1]
    var copy = 0...dim
    var mb = MeshBuilder()

    for (i in 0...nv) {
        var pt = Matrix(dim)
        var v = vert.column(i)
        for (j in copy) pt[j]=v[j]
        mb.addvertex(pt)
    }

    for (grade in 1..dim) {
        var conn = mesh.connectivitymatrix(0,grade)

        if (!conn) continue
        for (i in 0...conn.dimensions()[1]) {
            mb.addelement(grade, conn.rowindices(i))
        }
    }
    for (id1 in idlist1){
        for (id2 in idlist2){
            mb.addelement(1, [Int(id1),Int(id2)])
        }
    }

    return mb.build() 
}


fn CreateSelections(mesh, Lregion, Hregion, Rpore, Grain) {
    var LeftWallReg = Selection(mesh, fn(x,y,z) x <= -Lregion/2 + Grain)
    var RightWallReg = Selection(mesh, fn(x,y,z) x >= Lregion/2 - Grain)
    var LowerWallReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + Grain)
    var UpperWallReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - Grain)
    
    var LowerWallCentReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + 2*Grain and abs(x) < Lregion/8)
    var UpperWallCentReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - 2*Grain and abs(x) < Lregion/8)
    var bnds = Selection(mesh, boundary=true)
    bnds.addgrade(0)
    LeftWallReg.addgrade(0)
    RightWallReg.addgrade(0)
    LowerWallReg.addgrade(0)
    UpperWallReg.addgrade(0)
    var inner = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain)
    var innertop = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain and y>3*Rpore/4)
    var innerbottom = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain and y<-3*Rpore/4)
    
    var lefthalf = Selection(mesh, fn(x,y,z) x<0)
    var righthalf = Selection(mesh, fn(x,y,z) x>0)
    
    var porebnd = bnds.intersection(inner)
    var porebndtop = bnds.intersection(innertop)
    var porebndbottom = bnds.intersection(innerbottom)
    
    var LeftWall = bnds.intersection(LeftWallReg)
    var RightWall = bnds.intersection(RightWallReg)
    var LowerWallCent = bnds.intersection(LowerWallCentReg)
    var UpperWallCent = bnds.intersection(UpperWallCentReg)
    var LowerWall = bnds.intersection(LowerWallReg)
    var UpperWall = bnds.intersection(UpperWallReg)
    
    porebnd.addgrade(1)
    bnds.addgrade(1) 
    
    LeftWall.addgrade(1)
    RightWall.addgrade(1)
    UpperWall.addgrade(1)
    LowerWall.addgrade(1)
    
    Show(plotselection(mesh, UpperWallCent, grade = [0,1]))
    Show(plotselection(mesh, LowerWallCent, grade = [0,1]))
    return [LeftWall, RightWall, UpperWall, LowerWall, bnds, porebnd, porebndtop, porebndbottom, LowerWallCent, UpperWallCent]
}



var mesh1 = CreateAndSaveMesh(Lreg, Hreg, Rp, dx, String("InitialMeshStarTest"))

var Sels = CreateSelections(mesh1, Lreg, Hreg, Rp, dx)
var UpperWall = Sels[2], LowerWall = Sels[3], porebndtop = Sels[6], porebndbottom = Sels[7], lowerwallcent = Sels[8], upperwallcent = Sels[9]

var mesh2 = AddConnectionsToMesh(mesh1, porebndtop, upperwallcent)
var mesh3 = AddConnectionsToMesh(mesh2, porebndbottom, lowerwallcent)
var vtkME = VTKExporter(mesh3)
vtkME.export(String(pathexport,"/","InitialMeshStar",".vtk"))

