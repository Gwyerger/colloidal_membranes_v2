// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import optimize4
import vtk
import functionals

// Theoretical Parameters

// var Ksplay = 1
// var Kbend = 1
// var Ktwist = 1
var K = 1
var C = 2
var lamt = sqrt(K/C)
var qstar = 0.6

// Region Dimensions
var dx = 0.15/lamt
var Hreg = 4/lamt
var Lreg = 12/lamt
var Rp = 0


// Import/Export Destination

var pathexport = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/PiWall/q=${qstar}"
var initialmeshpath = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/PiWall"

// --------------------------------------------------


fn modulus(a, b){
    return (a/b - floor(a/b))*b
}

fn CreateSelections(mesh, Lregion, Hregion, Rpore, Grain) {
    var LeftWallReg = Selection(mesh, fn(x,y,z) x <= -Lregion/2 + Grain)
    var RightWallReg = Selection(mesh, fn(x,y,z) x >= Lregion/2 - Grain)
    var LowerWallReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + Grain)
    var UpperWallReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - Grain)

    var bnds = Selection(mesh, boundary=true)
    bnds.addgrade(0)
    LeftWallReg.addgrade(0)
    RightWallReg.addgrade(0)
    LowerWallReg.addgrade(0)
    UpperWallReg.addgrade(0)

    var LeftWall = bnds.intersection(LeftWallReg)
    var RightWall = bnds.intersection(RightWallReg)

    var LowerWall = bnds.intersection(LowerWallReg)
    var UpperWall = bnds.intersection(UpperWallReg)

    LeftWall.addgrade(1)
    RightWall.addgrade(1)
    UpperWall.addgrade(1)
    LowerWall.addgrade(1)
    
    return [LeftWall, RightWall, UpperWall, LowerWall]
}



 // //Initialize a field
fn AddNematicFieldEnergy(mesh, problem, Lregion, Hregion, Ksplay, Ktwist, Kbend, q, C) {
    var K = Ktwist
// 0.1*Matrix([2*random()-1, 2*random()-1, 2*random()-1]) +
    var nn = Field(mesh, fn(x,y,z)  Matrix([0,sin(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lregion/2*sqrt(C/K))),cos(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lregion/2*sqrt(C/K)))])) 
    var nem = Nematic(nn, ksplay = Ksplay, ktwist = Ktwist, kbend = Kbend, pitch = q)
    problem.addenergy(nem)
    return [nn, nem]
}

// Add a tilt energy functional C/2*sin^2(theta)
fn tIntegrand(x, n) {                   
    return (1-(n[2])^2)
}

fn AddTiltEnergy(problem, nn, C) {
    var tilt = AreaIntegral(tIntegrand, nn) 
    problem.addenergy(tilt, prefactor = C/2)
}
fn lIntegrand(x, n){
    return (1)
}

fn addleftrightconstraint(problem, leftwall, rightwall, field){    

    var xcon = LineIntegral(fn (x, n) n[0]^2, field)
    var ycon = LineIntegral(fn (x, n) n[1]^2, field)
    var zcon = LineIntegral(fn (x, n) n[2]^2, field)

    var xcons = Constraint(xcon, 0)
    var ycons = Constraint(ycon, 0)

    xcons.selection = leftwall.union(rightwall)
    xcons.field = field
    xcons.prefactor = 1
    xcons.onesided = false
    problem.constraints.append(xcons)

    ycons.selection = leftwall.union(rightwall)
    ycons.field = field
    ycons.prefactor = 1
    ycons.onesided = false
    problem.constraints.append(ycons)
}

fn addtopbottomconstraint(problem, bottomwall, topwall, field){    

    var xcon = LineIntegral(fn (x, n) n[0]^2, field)
    var ycon = LineIntegral(fn (x, n) n[1]^2, field)
    var zcon = LineIntegral(fn (x, n) n[2]^2, field)

    var xcons = Constraint(xcon, 0)

    xcons.selection = bottomwall.union(topwall)
    xcons.field = field
    xcons.prefactor = 1
    xcons.onesided = false
    problem.constraints.append(xcons)

}

fn AddConstraints(problem, mesh, nn, UpperWall, LowerWall, LeftWall, RightWall) {

    // Add a constraint on nx on top and bottom walls

    addleftrightconstraint(problem, LeftWall, RightWall, nn)
    addtopbottomconstraint(problem, LowerWall, UpperWall, nn)

    // Unit vector constraint 

    var lnorm = NormSq(nn)                      
    problem.addlocalconstraint(lnorm, field=nn, target=1) 
}



fn CreateOptimizers(problem, LeftWall, RightWall, UpperWall, LowerWall, nn) {

    // Create Problem Adapter and Controller    

    var adapt = ProblemAdapter(problem, nn)     
    var control = PenaltyController(adapt, verbosity="quiet")
    control.ctol = 1e-6


    return control
}

fn Optimization(str, nn, control) {
    var iterations = 30
    var vtkE = VTKExporter(nn)
    var h = 0
    vtkE.export("${pathexport}/${str}_${h}.vtk")
    var Break = false
//    var A = Area()

    for (i in 0...iterations) {
//        if (A.total(mesh) > Lreg*Hreg){break}
            print("optimizing: step ${h+1}/${iterations}")
            control.optimize(1)
            h=h+1
            vtkE.export("${pathexport}/${str}_${h}.vtk")
            if (control.hasConverged()) {
                print("Convergence Achieved")
                break                
            }
    }
}



var str = "PiWallq${qstar}"
var vtkMI = VTKImporter(String(initialmeshpath,"/InitialMeshPiWall.vtk"))
var mesh = vtkMI.mesh()

var Selections = CreateSelections(mesh, Lreg, Hreg, Rp, dx)
var LeftWall = Selections[0], RightWall = Selections[1], UpperWall = Selections[2], LowerWall = Selections[3] 

var problem = OptimizationProblem(mesh)

var fe = AddNematicFieldEnergy(mesh, problem, Lreg, Hreg, 1,1,1, qstar, 1)
var nn = fe[0], nem = fe[1]

AddTiltEnergy(problem, nn, 1)
AddConstraints(problem, mesh, nn, UpperWall, LowerWall, LeftWall, RightWall)

var control = CreateOptimizers(problem, LeftWall, RightWall, UpperWall, LowerWall, nn)

Optimization(str, nn, control)





