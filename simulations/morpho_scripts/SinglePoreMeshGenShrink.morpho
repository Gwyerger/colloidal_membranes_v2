// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import optimize4
import vtk
import functionals

// Region Dimensions
var K = 1
var C = 2
var lamt = sqrt(K/C)
var dx = 0.15/lamt
var Hreg = 4/lamt
var Lreg = 12/lamt
var Rp = 0.5/lamt
var Rst = 0.75/lamt

var Rp[59] = [0.025/lamt, 0.0375/lamt, 0.05/lamt, 0.0625/lamt, 0.075/lamt, 0.0875/lamt, 0.1/lamt, 0.1125/lamt, 0.125/lamt, 0.1375/lamt, 0.15/lamt, 0.1625/lamt, 0.175/lamt, 0.1875/lamt, 0.2/lamt, 0.2125/lamt, 0.225/lamt, 0.2375/lamt, 0.25/lamt, 0.2625/lamt, 0.275/lamt, 0.2875/lamt, 0.3/lamt, 0.3125/lamt, 0.325/lamt, 0.3375/lamt, 0.35/lamt, 0.3625/lamt, 0.375/lamt, 0.3875/lamt, 0.4/lamt, 0.4125/lamt, 0.425/lamt, 0.4375/lamt, 0.45/lamt, 0.4625/lamt, 0.475/lamt, 0.4875/lamt, 0.5/lamt, 0.5125/lamt, 0.525/lamt, 0.5375/lamt, 0.55/lamt, 0.5625/lamt, 0.575/lamt, 0.5875/lamt, 0.6/lamt, 0.6125/lamt, 0.625/lamt, 0.6375/lamt, 0.65/lamt, 0.6625/lamt, 0.675/lamt, 0.6875/lamt, 0.7/lamt, 0.7125/lamt, 0.725/lamt, 0.7375/lamt, 0.75/lamt]

var Rst[59] = [0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.25/lamt, 0.35/lamt, 0.35/lamt, 0.35/lamt, 0.35/lamt, 0.35/lamt, 0.35/lamt, 0.35/lamt, 0.35/lamt, 0.45/lamt, 0.45/lamt, 0.45/lamt, 0.45/lamt, 0.45/lamt, 0.45/lamt, 0.45/lamt, 0.45/lamt, 0.55/lamt, 0.55/lamt, 0.55/lamt, 0.55/lamt, 0.55/lamt, 0.55/lamt, 0.55/lamt, 0.55/lamt, 0.65/lamt, 0.65/lamt, 0.65/lamt, 0.65/lamt, 0.65/lamt, 0.65/lamt, 0.65/lamt, 0.65/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt, 0.75/lamt]

var Rlabels[59] = ["0.025", "0.0375", "0.05", "0.0625", "0.075", "0.0875", "0.1", "0.1125", "0.125", "0.1375", "0.15", "0.1625", "0.175", "0.1875", "0.2", "0.2125", "0.225", "0.2375", "0.25", "0.2625", "0.275", "0.2875", "0.3", "0.3125", "0.325", "0.3375", "0.35", "0.3625", "0.375", "0.3875", "0.4", "0.4125", "0.425", "0.4375", "0.45", "0.4625", "0.475", "0.4875", "0.5", "0.5125", "0.525", "0.5375", "0.55", "0.5625", "0.575", "0.5875", "0.6", "0.6125", "0.625", "0.6375", "0.65", "0.6625", "0.675", "0.6875", "0.7", "0.7125", "0.725", "0.7375", "0.75"]

// Import/Export Destination

var pathexport = "/home/gabriel/Repositories/colloidal_membranes_v2/vtk_results/Round9_byradius/initialmeshes"

// --------------------------------------------------

fn CreateAndSaveMesh(Lregion, Hregion, Rstart, Rpore, Grain, str){
    if (Rpore > 0){
        var hs0 = HalfSpaceDomain(Matrix([0,Hregion]), Matrix([0,1]))
        var hs1 = hs0.difference(HalfSpaceDomain(Matrix([0,Hregion/2]), Matrix([0,-1])))
        var hs2 = hs1.difference(HalfSpaceDomain(Matrix([0,-Hregion/2]), Matrix([0,1])))
        var hs3 = hs2.difference(HalfSpaceDomain(Matrix([Lregion/2,0]), Matrix([-1,0])))
        var rect = hs3.difference(HalfSpaceDomain(Matrix([-Lregion/2,0]), Matrix([1,0])))
        var pore = CircularDomain(Matrix([0,0]), Rstart+0.001)
        var dom = rect.difference(pore)
        var mg = MeshGen(dom, [-Lregion/2..Lregion/2:Grain, -Hregion/2..Hregion/2+0.01:Grain], quiet=false)
        var meshe = mg.build()
        var mesh = ChangeMeshDimension(meshe, 3)
        mesh.addgrade(1)
        mesh.addgrade(2)
	var bnd = Selection(mesh, boundary=true)
        bnd.addgrade(0)
        var inner = Selection(mesh, fn(x,y,z) x^2 + y^2 < (Rstart+Grain)^2)
        var Rpsel = bnd.intersection(inner)
        Rpsel.addgrade(1)
        var Rosel = bnd.difference(Rpsel)

        for (i in 1..Int((Rstart - Rpore)/0.0125)) {
            var shrinkpore = OptimizationProblem(mesh)
            var shrinkto = ScalarPotential(fn(x,y,z) (x^2 + y^2 - (Rstart-i*0.0125)^2)^2)
            shrinkpore.addenergy(shrinkto, selection=Rpsel, prefactor = 1)
            var ropt = ShapeOptimizer(shrinkpore, mesh)
            ropt.fix(Rosel)
            ropt.conjugategradient(10)
            var regulate = OptimizationProblem(mesh)
            regulate.addenergy(EquiElement())
            var ropt = ShapeOptimizer(regulate, mesh)
            ropt.fix(bnd)
            ropt.conjugategradient(50)
            equiangulate(mesh, fix=bnd)
        }

	var vtkME = VTKExporter(mesh)
        vtkME.export(String(pathexport,"/",str,".vtk"))
        return mesh
    }
    if (Rpore = 0) {
        var hs0 = HalfSpaceDomain(Matrix([0,Hregion]), Matrix([0,1]))
        var hs1 = hs0.difference(HalfSpaceDomain(Matrix([0,Hregion/2]), Matrix([0,-1])))
        var hs2 = hs1.difference(HalfSpaceDomain(Matrix([0,-Hregion/2]), Matrix([0,1])))
        var hs3 = hs2.difference(HalfSpaceDomain(Matrix([Lregion/2,0]), Matrix([-1,0])))
        var rect = hs3.difference(HalfSpaceDomain(Matrix([-Lregion/2,0]), Matrix([1,0])))
        var mg = MeshGen(rect, [-Lregion/2..Lregion/2:Grain, -Hregion/2..Hregion/2+0.01:Grain], quiet=false)
        var meshe = mg.build()
        var mesh = ChangeMeshDimension(meshe, 3)
        mesh.addgrade(1)
        mesh.addgrade(2)
        var vtkME = VTKExporter(mesh)
        vtkME.export(String(pathexport,"/",str,".vtk"))
        return mesh
    }
}

fn AddConnectionsToMesh(mesh, sel1, sel2) {
    var idlist1 = Matrix(sel1.idlistforgrade(0))
    var idlist2 = Matrix(sel2.idlistforgrade(0))
    
    var vert = mesh.vertexmatrix()
    var dim = vert.dimensions()[0] 
    var nv = vert.dimensions()[1]
    var copy = 0...dim
    var mb = MeshBuilder()
    
    for (i in 0...nv) { 
        var pt = Matrix(dim)
        var v = vert.column(i)
        for (j in copy) pt[j]=v[j]
        mb.addvertex(pt)
    }
    
    for (grade in 1..dim) {
        var conn = mesh.connectivitymatrix(0,grade)

        if (!conn) continue
        for (i in 0...conn.dimensions()[1]) {
            mb.addelement(grade, conn.rowindices(i))
        }
    }
    for (id1 in idlist1){
        for (id2 in idlist2){
            mb.addelement(1, [Int(id1),Int(id2)]) 
        }
    }

    return mb.build()
}


fn CreateSelections(mesh, Lregion, Hregion, Rpore, Grain) {
    var LeftWallReg = Selection(mesh, fn(x,y,z) x <= -Lregion/2 + Grain)
    var RightWallReg = Selection(mesh, fn(x,y,z) x >= Lregion/2 - Grain)
    var LowerWallReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + Grain)
    var UpperWallReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - Grain)

    var LowerWallCentReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + 2*Grain and abs(x) < Lregion/8)
    var UpperWallCentReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - 2*Grain and abs(x) < Lregion/8)
    var bnds = Selection(mesh, boundary=true)
    bnds.addgrade(0)
    LeftWallReg.addgrade(0)
    RightWallReg.addgrade(0)
    LowerWallReg.addgrade(0)
    UpperWallReg.addgrade(0)
    var inner = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain)
    var innertop = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain and y>3*Rpore/4)
    var innerbottom = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain and y<-3*Rpore/4)

    var lefthalf = Selection(mesh, fn(x,y,z) x<0)
    var righthalf = Selection(mesh, fn(x,y,z) x>0)

    var porebnd = bnds.intersection(inner)
    var porebndtop = bnds.intersection(innertop)
    var porebndbottom = bnds.intersection(innerbottom)

    var LeftWall = bnds.intersection(LeftWallReg)
    var RightWall = bnds.intersection(RightWallReg)
    var LowerWallCent = bnds.intersection(LowerWallCentReg)
    var UpperWallCent = bnds.intersection(UpperWallCentReg)
    var LowerWall = bnds.intersection(LowerWallReg)
    var UpperWall = bnds.intersection(UpperWallReg)

    porebnd.addgrade(1)
    bnds.addgrade(1)

    LeftWall.addgrade(1)
    RightWall.addgrade(1)
    UpperWall.addgrade(1)
    LowerWall.addgrade(1)

    return [LeftWall, RightWall, UpperWall, LowerWall, bnds, porebnd, porebndtop, porebndbottom, LowerWallCent, UpperWallCent]
}



for(var i=0; i<Rp.dimensions()[0]; i+=1){
var mesh1 = CreateAndSaveMesh(Lreg, Hreg, Rst[i], Rp[i], dx, String("InitialMeshRp=${Rlabels[i]}"))
Show(plotmesh(mesh1, grade = [0,1]))
	if(Rp[i] >= 0.45){
		var Sels = CreateSelections(mesh1, Lreg, Hreg, Rp[i], dx)
		var UpperWall = Sels[2], LowerWall = Sels[3], porebndtop = Sels[6], porebndbottom = Sels[7], lowerwallcent = Sels[8], upperwallcent = Sels[9]
		var mesh2 = AddConnectionsToMesh(mesh1, porebndtop, upperwallcent)
		var mesh3 = AddConnectionsToMesh(mesh2, porebndbottom, lowerwallcent)
		Show(plotmesh(mesh3, grade = [0,1]))
		var vtkME = VTKExporter(mesh3)
		vtkME.export(String(pathexport,"/","InitialMeshRp=${Rlabels[i]}",".vtk"))
	}
}
