// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import vtk
import functionals


// Theoretical Parameters

// var Ksplay = 1
// var Kbend = 1
// var Ktwist = 1
var K = 1
var C = 2
var lamt = sqrt(K/C)
var qstar = 0
var gstar = 0.4
var pstar = 0.05

// Region Dimensions
var dx = 0.15/lamt
var Hreg = 4/lamt
var Lreg = 12/lamt
var Rp = 0.75/lamt
var onerodlength = 0.5/lamt

// Import/Export Destination

var pathexport = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/Round8/q=${qstar}g=${gstar}"
var pathenergies = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/CodeMega/DataAnalysis/Round8/EnergyPerIteration"
var initialmeshpath = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/Round8"

// --------------------------------------------------


fn modulus(a, b){
    return (a/b - floor(a/b))*b
}

fn CreateSelections(mesh, Lregion, Hregion, Rpore, Grain) {
    var LeftWallReg = Selection(mesh, fn(x,y,z) x <= -Lregion/2 + Grain)
    var RightWallReg = Selection(mesh, fn(x,y,z) x >= Lregion/2 - Grain)
    var LowerWallReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + Grain)
    var UpperWallReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - Grain)

    var LowerWallCentReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + 2*Grain and abs(x) < 2*Rpore)
    var UpperWallCentReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - 2*Grain and abs(x) < 2*Rpore)
    var bnds = Selection(mesh, boundary=true)
    bnds.addgrade(0)
    LeftWallReg.addgrade(0)
    RightWallReg.addgrade(0)
    LowerWallReg.addgrade(0)
    UpperWallReg.addgrade(0)
    var inner = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain)
    var innertop = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain and y>3*Rpore/4)
    var innerbottom = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-Grain and abs(y)<Hregion/2-Grain and y<-3*Rpore/4)

    var lefthalf = Selection(mesh, fn(x,y,z) x<0)
    var righthalf = Selection(mesh, fn(x,y,z) x>0)

    var porebnd = bnds.intersection(inner)
    var porebndtop = bnds.intersection(innertop)
    var porebndbottom = bnds.intersection(innerbottom)

    var LeftWall = bnds.intersection(LeftWallReg)
    var RightWall = bnds.intersection(RightWallReg)
    var LowerWallCent = bnds.intersection(LowerWallCentReg)
    var UpperWallCent = bnds.intersection(UpperWallCentReg)
    var LowerWall = bnds.intersection(LowerWallReg)
    var UpperWall = bnds.intersection(UpperWallReg)

    porebnd.addgrade(1)
    bnds.addgrade(1) 
  
    LeftWall.addgrade(1)
    RightWall.addgrade(1)
    UpperWall.addgrade(1)
    LowerWall.addgrade(1)
    
    Show(plotselection(mesh, UpperWallCent, grade = [0,1]))
    Show(plotselection(mesh, LowerWallCent, grade = [0,1]))
    return [LeftWall, RightWall, UpperWall, LowerWall, bnds, porebnd, porebndtop, porebndbottom, LowerWallCent, UpperWallCent]
}


//fn AddConnectionsToMesh(mesh, sel1, sel2) {
//    var idlist1 = Matrix(sel1.idlistforgrade(0))
//    var idlist2 = Matrix(sel2.idlistforgrade(0))
//
//    var vert = mesh.vertexmatrix()
//    var dim = vert.dimensions()[0]
//    var nv = vert.dimensions()[1]
//    var copy = 0...dim
//    var mb = MeshBuilder()
//
//    for (i in 0...nv) {
//        var pt = Matrix(dim)
//        var v = vert.column(i)
//        for (j in copy) pt[j]=v[j]
//        mb.addvertex(pt)
//    }
//
//    for (grade in 1..dim) {
//        var conn = mesh.connectivitymatrix(0,grade)
//
//        if (!conn) continue
//        for (i in 0...conn.dimensions()[1]) {
//            mb.addelement(grade, conn.rowindices(i))
//        }
//    }
//    for (id1 in idlist1){
//        for (id2 in idlist2){
//            mb.addelement(1, [Int(id1),Int(id2)])
//        }
//    }
//
//    return mb.build() 
//}



// The below method is clunky and yeilds results which deviate after a large number of iterations.

//fn MicroscopicConstraint(mesh, director, sel1, sel2, fix1, fix2, rodlength) {
//    // First: find the two points which are closest between the two selections starting at a maximum distance consideration
//    var idlist1 = Matrix(sel1.idlistforgrade(0))
//    var idlist2 = Matrix(sel2.idlistforgrade(0))
//    var points1 = []
//    var points2 = []
//
//    for (id in idlist1) {
//        points1.append(mesh.vertexposition(Int(id)))
//    }
//
//    for (id in idlist2) {
//        points2.append(mesh.vertexposition(Int(id)))
//    }
//    var closestids
//    var closestpoints
//    var minimumdistance = 2*rodlength
//
//    for (i1 in 0...idlist1.dimensions()[0]) {
//        for (i2 in 0...idlist2.dimensions()[0]) {
//            var difference = (points1[i1] - points2[i2]).norm()
//            if (difference < minimumdistance) {
//                minimumdistance = difference
//                closestids = [idlist1[i1], idlist2[i2]]
//                closestpoints = [points1[i1], points2[i2]]
//                }     
//        }
//    }
//
//    if (closestids == nil){
//    return    
//    }
//
//        
//    // Second: if[the two points have an average director dotted with difference unit vector greater or equal to cos(45deg)];
//    //                                                                                                 (roughly, check whether the nematic phase is dominating rather than the smectic phase. We are 
//    //                                                                                                  essentially assuming that the smectic phase hard-transitions to a nematic phase at 45 degrees,
//    //                                                                                                  and that the nematic phase is neccesary for the twisted bridges.)
//    
//    
//    var avgdirector = (director[0,closestids[0]] + director[0,closestids[1]])/2
//
//    var midpoint = (closestpoints[0]+closestpoints[1])/2
//    var diffvector = (closestpoints[0]-closestpoints[1])
//    var diffunitvector = diffvector/(diffvector.norm())
//
//    if ((diffunitvector.inner(avgdirector))^2 < 1/2) {
//    return
//    }
//
//    // Third: enforce the constraint that niether points are able to come closer to the line which bisects the two points than one half of the rod length. We will use a reassigning of vertex positions.
//    
//    if (diffvector.norm()<rodlength) {
//    closestpoints[0] = midpoint + diffunitvector*rodlength/2
//    closestpoints[1] = midpoint - diffunitvector*rodlength/2
//*(diffunitvector.inner(avgdirector))
//    if (!fix1){
//    mesh.setvertexposition(Int(closestids[0]), closestpoints[0])}
//    if (!fix2){
//    mesh.setvertexposition(Int(closestids[1]), closestpoints[1])}        
//    print("microscopic run")
//    diffvector = (closestpoints[0]-closestpoints[1])
//    }
//    var point1sel = Selection(mesh)
//    var point2sel = Selection(mesh)
//    point1sel.setindex(0,Int(closestids[0]),true)
//    point2sel.setindex(0,Int(closestids[1]),true)
//    Show(plotselection(mesh, point1sel, grade = [0,1,2]))
//
//
//    
//    var rigidrod1 = ScalarPotential(fn (x,y,z) Matrix([diffunitvector[0]*((midpoint[0]+diffunitvector[0]*rodlength/2)-x),diffunitvector[1]*((midpoint[1]+diffunitvector[1]*rodlength/2)-y), 0]),Matrix([-diffunitvector[0]*x,-diffunitvector[1]*y, 0]))
//    var rigidrod2 = ScalarPotential(fn (x,y,z) Matrix([diffunitvector[0]*((midpoint[0]-diffunitvector[0]*rodlength/2)+x),diffunitvector[1]*((midpoint[1]-diffunitvector[1]*rodlength/2)+y), 0]),Matrix([diffunitvector[0]*x,diffunitvector[1]*y, 0]))
//
//    
//
//    Problem.addlocalconstraint(rigidrod1, selection=point1sel, onesided=true)
//    Problem.addlocalconstraint(rigidrod2, selection=point2sel, onesided=true)
//
//}
//

fn SoftRepulsion(r, rodlength) {
    if (r < rodlength){
    return 1/r
    }
    else return 0 
}

fn SoftRepulsionGrad(r, rodlength) {
    if (r < rodlength){
    return -1/r^2
    }
    else return 0 
}


fn MicroscopicConstraint2(mesh, problem, sel1, sel2, rodlength){
    
	var idlist1 = Matrix(sel1.idlistforgrade(0))
	var idlist2 = Matrix(sel2.idlistforgrade(0))
	var pointsel = Selection(mesh)
	pointsel.setindex(0,Int(idlist1[0]),true)
	pointsel.setindex(0,Int(idlist2[0]),true)
    var pw = PairwisePotential(fn (r) SoftRepulsion(r, rodlength), fn (r) SoftRepulsionGrad(r, rodlength), cutoff=0.1*rodlength)    

    problem.addenergy(pw, selection=pointsel, prefactor = 100)


//	
//	for (id1 in idlist1) {
//          	for (id2 in idlist2){
//			var pointsel = Selection(mesh)
//			pointsel.setindex(0,Int(id1),true)
//			pointsel.setindex(0,Int(id2),true)
//            pointsel.addgrade(1)
//			problem.addlocalconstraint(Len, selection = pointsel, target=rodlength, onesided = true)
//		}
//	}
}




fn EnergiesToFile(path, str, sopt, fopt) {
    var sonum = Matrix(sopt.energy).dimensions()[0]-1
    var fonum = Matrix(fopt.energy).dimensions()[0]-1
    var fs = File("${path}/${str}sopt.txt", "w")
    for (i in 0..sonum) fs.write("${sopt.energy[i]}")
    var ff = File("${path}/${str}fopt.txt", "w")
    for (i in 0..fonum) ff.write("${fopt.energy[i]}")
    fs.close()
    ff.close()
}

fn ListToFile(str, list){
    var f = File("${pathexport}/${str}.txt", "w")
    for (dat in list) f.write(dat)
    f.close()
}


 // //Initialize a field
fn AddNematicFieldEnergy(mesh, problem, Lregion, Hregion, Ksplay, Ktwist, Kbend, q, C) {
    var K = Ktwist
    var nn = Field(mesh, fn(x,y,z) Matrix([0,sin(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lregion/2*sqrt(C/K))),cos(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lregion/2*sqrt(C/K)))])) 
    var nem = Nematic(nn, ksplay = Ksplay, ktwist = Ktwist, kbend = Kbend, pitch = q)
    problem.addenergy(nem)
    return [nn, nem]
}

// For restricting the X-component locally
class XCompSquared {
    init(vec) {
        self.vec = vec
    }
    integrand(vec) {
        var int = vec.op(fn (x) x[0]^2)
        return int.linearize().transpose()
    }

    fieldgradient(vec, mesh) {
        // print vec
        var fg = vec.op(fn (x) Matrix([2*x[0], 0, 0]))
        return fg
    }

    total(vec) {
        return self.integrand(vec).sum()
    }  
}

// Add a tilt energy functional C/2*sin^2(theta)
fn tIntegrand(x, n) {                   
    return (1-(n[2])^2)
}

fn AddTiltEnergy(problem, nn, C) {
    var tilt = AreaIntegral(tIntegrand, nn) 
    problem.addenergy(tilt, prefactor = C/2)
}
fn lIntegrand(x, n){
    return (1)
}

// Add an anisotropic line tension functional
// fn lIntegrand(x, n){
//     return (1 + (1 - n.inner(tangent())^2))
// }
fn AddEdgeEnergy(problem, sel, nn, g) {
    var lten = LineIntegral(lIntegrand, nn)
    problem.addenergy(lten, selection=sel, prefactor = g)
}

fn AddPressure(problem, f) {
    problem.addenergy(Area(), prefactor=(-f))
}

fn AddConstraints(problem, reg,  UpperWall, LowerWall, LeftWall, RightWall, nn) {
    // Add a level set to keep things in the z axis
    var lcons = ScalarPotential(fn (x,y,z) z)    
    problem.addlocalconstraint(lcons)
    reg.addlocalconstraint(lcons)   

    // Add constraints to keep the pore from turning inside out (not working yet)


    // // Fully restrict nx
     var lxcs=XCompSquared(nn)
     problem.addlocalconstraint(lxcs, field=nn,selection = UpperWall, target=0)
     problem.addlocalconstraint(lxcs, field=nn,selection = LowerWall, target=0)

    // Add a functional to penalize nx
//     var xcon = LineIntegral(fn (x, n) n[0]^2, nn)
//     problem.addenergy(xcon, selection = UpperWall, prefactor = 1000)
//     problem.addenergy(xcon, selection = LowerWall, prefactor = 1000)

    // Unit vector constraint 
    var lnorm = NormSq(nn)                      
    problem.addlocalconstraint(lnorm, field=nn, target=1) 
}

fn CreateOptimizers(problem, reg,  mesh, LeftWall, RightWall, UpperWall, LowerWall, porebnd, nn) {

    // Create the field optimizer
    var fopt = FieldOptimizer(problem, nn)
    fopt.stepsize = 0.01
    fopt.fix(RightWall)
    fopt.fix(LeftWall)
//    fopt.fix(UpperWall)
//    fopt.fix(LowerWall)
    fopt.quiet = true
    fopt.etol = 5e-6
    var sopt = ShapeOptimizer(problem, mesh)   

    sopt.quiet = true
    sopt.stepsize = 0.001
    sopt.steplimit = 0.01
    sopt.etol = 5e-6
    sopt.fix(RightWall)
    sopt.fix(LeftWall)
    sopt.fix(UpperWall)
    sopt.fix(LowerWall)
    
    var leq = EquiElement()                     // Try to equalize elements
    reg.addenergy(leq, prefactor = 1)         

    var ropt = ShapeOptimizer(reg, mesh)
    ropt.stepsize = 0.001
    ropt.steplimit = 0.005
    ropt.fix(porebnd)
    ropt.fix(RightWall)
    ropt.fix(LeftWall)
    ropt.fix(UpperWall)
    ropt.fix(LowerWall)
    ropt.quiet=true

    return [fopt, sopt, ropt, reg]
}

fn Optimization(str, mesh, nn, ropt, fopt, sopt, lowerwall, poresel, upperwall) {
    var iterations = 500
    var vtkE = VTKExporter(nn)
    var h = 0
    vtkE.export("${pathexport}/${str}_${h}.vtk")
    var Break = false
//    var A = Area()

    for (i in 0...iterations) {
//        if (A.total(mesh) > Lreg*Hreg){break}
        if (i < iterations){
            if (Int(modulus(i, 5))==0) {print("optimizing: step ${h/5+1}/${iterations/5}")}
            fopt.conjugategradient(4)
            sopt.conjugategradient(2)
            ropt.conjugategradient(3)
//            if (h>=100){
//            MicroscopicConstraint(mesh, nn, lowerwall, poresel, true, false, onerodlength/2)
//            MicroscopicConstraint(mesh, nn, lowerwall, poresel, true, false, onerodlength/2)
//            MicroscopicConstraint(mesh, nn, poresel, upperwall, false, true, onerodlength/2)
//            MicroscopicConstraint(mesh, nn, poresel, upperwall, false, true, onerodlength/2)
//            }
//            equiangulate(mesh, quiet=true, fix=)
            ropt.conjugategradient(5)
            h=h+1
            vtkE.export("${pathexport}/${str}_${h}.vtk")
        }        
//        else {
//            fopt.linesearch(10)
//            sopt.linesearch(10)
//            if (Int(modulus(i, 5))==0) {
//                ropt.conjugategradient(1)
//                equiangulate(mesh, quiet=true)
//                ropt.conjugategradient(1)
//            }
//            if (sopt.hasconverged() && fopt.hasconverged()) {
//                break
//            }
//            
//            if (Int(modulus(i, 5))==0) {
//                h=h+1
//                vtkE.export("${pathexport}/${str}_${h}.vtk")
//            }
//        }
        var sonum = Matrix(sopt.energy).dimensions()[0]-1
        var fonum = Matrix(fopt.energy).dimensions()[0]-1

//        if(abs(sopt.energy[sonum]) > abs(sopt.energy[0]*100) or abs(fopt.energy[fonum]) > abs(fopt.energy[0]*100)) {
//            print("Mesh Degradation")
//            break
//        }
        // print("sopt step: ${sopt.energy[sonum]-sopt.energy[sonum-1]}, fopt step: ${fopt.energy[fonum]-fopt.energy[fonum-1]}")
    }
}


//fn Refinement(str, mesh, nn, porebnd, LeftWall, RightWall, UpperWall, LowerWall, problem, reg, sopt, fopt, ropt, Nlevels) {
//    var vtkE = VTKExporter(nn)
//    /* Refinement */
//    for (level in 1..Nlevels) {
//        var mr = MeshRefiner([mesh, nn, porebnd, LeftWall, RightWall, UpperWall, LowerWall])
//        var refmap = mr.refine()
//
//        // Now refinement is done update the problems and optimizers
//        for (el in [problem, reg, sopt, fopt, ropt]) el.update(refmap)
//
//        // Update our references 
//        mesh = refmap[mesh]   // There are tidier ways to do this!
//        nn = refmap[nn]
//        porebnd = refmap[porebnd]
//        LeftWall = refmap[LeftWall]
//        RightWall = refmap[RightWall]
//        UpperWall = refmap[UpperWall]
//        LowerWall = refmap[LowerWall]
//        // Continue optimizing. We don't need further regularization for this particular problem
//        for (i in 1..5) {                  
//            sopt.conjugategradient(10)
//            fopt.conjugategradient(10)
//            if (sopt.hasconverged() && fopt.hasconverged()) break 
//        }
//        vtkE.export(String(str, "Refined",level,".vtk"))
//    }
//}

var str = "SinglePoreg${gstar}p${pstar}q${qstar}"
var vtkMI = VTKImporter(String(initialmeshpath,"/InitialMeshStar.vtk"))
var mesh = vtkMI.mesh()

var Selections = CreateSelections(mesh, Lreg, Hreg, Rp, dx)
var LeftWall = Selections[0], RightWall = Selections[1], UpperWall = Selections[2], LowerWall = Selections[3], bnds = Selections[4], porebnd = Selections[5], porebndtop=Selections[6], porebndbottom=Selections[7], LowerWallCent=Selections[8], UpperWallCent=Selections[9]

//Show(plotselection(mesh, UpperWall, grade = [0,1,2]))

var problem = OptimizationProblem(mesh)
var reg = OptimizationProblem(mesh) 

var fe = AddNematicFieldEnergy(mesh, problem, Lreg, Hreg, 1,1,1, qstar, 1)
var nn = fe[0], nem = fe[1]
AddTiltEnergy(problem, nn, 1)
AddEdgeEnergy(problem, porebnd, nn, gstar)
AddPressure(problem, pstar)
AddConstraints(problem, reg, UpperWall, LowerWall, LeftWall, RightWall, nn)
//MicroscopicConstraint2(mesh, problem, porebndtop, UpperWallCent, onerodlength)
//------------------------

var sel1 = porebndtop
var sel2 = UpperWallCent
var idlist1 = Matrix(sel1.idlistforgrade(0))
var idlist2 = Matrix(sel2.idlistforgrade(0))
var pointsel = Selection(mesh)
pointsel.setindex(0,Int(idlist1[0]),true)
pointsel.setindex(0,Int(idlist2[0]),true)
var pw = PairwisePotential(fn (r) SoftRepulsion(r, onerodlength), fn (r) SoftRepulsionGrad(r, onerodlength), cutoff=0.1*onerodlength)    
problem.addenergy(pw, selection=pointsel, prefactor = 100)

//------------------------
var Optimizers = CreateOptimizers(problem, reg, mesh, LeftWall, RightWall, UpperWall, LowerWall, porebnd, nn)
var fopt = Optimizers[0], sopt = Optimizers[1], ropt = Optimizers[2]

Optimization(str, mesh, nn, ropt, fopt, sopt, LowerWall, porebnd, UpperWall)

Show(plotmesh(mesh, grade = [0,1,2]))

EnergiesToFile(pathenergies, "EnergiesItg${gstar}p${pstar}q${qstar}", sopt, fopt)


