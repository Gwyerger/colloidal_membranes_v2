// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import optimize4
import vtk
import functionals

// Region Dimensions
var K = 1
var C = 2
var lamt = sqrt(K/C)
var dx = 0.15/lamt
var Ro = 5/lamt
var Rp = 0.05/lamt
var Rpst = 0.35/lamt



// Import/Export Destination

var pathexport = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega"


// --------------------------------------------------

fn CreateAndSaveMesh(Rreg, Rpstart, Rpore, Grain, str){
    if (Rpore > 0){
        var outer = CircularDomain(Matrix([0,0]), Rreg)
        var pore = CircularDomain(Matrix([0,0]), Rpstart)
        var dom = outer.difference(pore)
        var mg = MeshGen(dom, [-Rreg-Grain..Rreg+Grain:Grain, -Rreg-Grain..Rreg+Grain:Grain], quiet=false)
        var mesh = mg.build()
        mesh = ChangeMeshDimension(mesh, 3)
        mesh.addgrade(1)
        mesh.addgrade(2)
        var bnd = Selection(mesh, boundary=true)
        bnd.addgrade(0)
        var inner = Selection(mesh, fn(x,y,z) x^2 + y^2 < (Rpstart+Grain)^2)
        var Rpsel = bnd.intersection(inner)
        Rpsel.addgrade(1)
        var Rosel = bnd.difference(Rpsel)
        
        
        for (i in 1..Int((Rpstart - Rpore)/0.05)) {
            var shrinkpore = OptimizationProblem(mesh)
//            shrinkpore.addenergy(EquiElement(), selection = Rpsel, prefactor = 1)
            var shrinkto = ScalarPotential(fn(x,y,z) (x^2 + y^2 - (Rpstart-i*0.05)^2)^2)
            shrinkpore.addenergy(shrinkto, selection=Rpsel, prefactor = 1)
            var ropt = ShapeOptimizer(shrinkpore, mesh)
            ropt.fix(Rosel)
            ropt.conjugategradient(10)
            var regulate = OptimizationProblem(mesh)
            regulate.addenergy(EquiElement())
            var ropt = ShapeOptimizer(regulate, mesh)
            ropt.fix(bnd)
            ropt.conjugategradient(50)
            equiangulate(mesh, fix=bnd)
        }


        Show(plotmesh(mesh, grade=[0,1]))
//        var vtkME = VTKExporter(mesh)
//        vtkME.export(String(pathexport,"/",str,".vtk"))
        return mesh
    }
}

var mesh1 = CreateAndSaveMesh(Ro, Rpst, Rp, dx, String("InitialMeshCircularRp${Rp}"))

