// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import optimize4
import vtk
import functionals

// Region Dimensions
var K = 1
var C = 2
var lamt = sqrt(K/C)
var dx = 0.15/lamt
var Hreg = 4/lamt + dx/2
var Lreg = 12/lamt + dx/2
// for this example, we use q=0.3, g=0.3
var q = 0.3

// Import/Export Destination

var pathexport = "/home/gabriel/Repositories/colloidal_membranes_v2/vtk_results/Round9_byellipse/initialmeshes"


// --------------------------------------------------



fn eqradius(x,y){
	var th = arctan(y/x)
	var a0 = 1.075991808923454
	var a1 = -0.8302774213716195
	var a2 = 0.4094531446406579
	var a3 = -0.19925257566320323
	var a4 = 0.09022330139685557
	var b1 = 0.0025983859135616906
	var b2 = -0.00815335966128761
	var b3 = -0.007345427443555368
	var b4 = -0.014033980167126014
	var w = 1.9961883936111349
	var rad = a0 + a1*cos(w*th) + a2*cos(2*w*th) + a3*cos(3*w*th) + a4*cos(4*w*th) + b1*sin(w*th) + b2*sin(2*w*th) + b3*sin(3*w*th) + b4*sin(4*w*th)
	return rad
}


fn CreateAndSaveMesh(Lregion, Hregion, Grain, str, scale, stscale){
        var hs0 = HalfSpaceDomain(Matrix([0,Hregion]), Matrix([0,1]))
        var hs1 = hs0.difference(HalfSpaceDomain(Matrix([0,Hregion/2]), Matrix([0,-1])))
        var hs2 = hs1.difference(HalfSpaceDomain(Matrix([0,-Hregion/2]), Matrix([0,1])))
        var hs3 = hs2.difference(HalfSpaceDomain(Matrix([Lregion/2,0]), Matrix([-1,0])))
        var rect = hs3.difference(HalfSpaceDomain(Matrix([-Lregion/2,0]), Matrix([1,0])))
        var pore = Domain(fn (x) -(x[0]^2 + x[1]^2 - (stscale*eqradius(x[0], x[1]))^2))
        var dom = rect.difference(pore)
        var mg = MeshGen(dom, [-Lregion/2..Lregion/2:Grain, -Hregion/2..Hregion/2+0.01:Grain], quiet=false)
        var meshe = mg.build()
        var mesh = ChangeMeshDimension(meshe, 3)
        mesh.addgrade(1)
        mesh.addgrade(2)
	var bnd = Selection(mesh, boundary=true)
        bnd.addgrade(0)
        var inner = Selection(mesh, fn(x,y,z) abs(y) < (Hregion/2 - Grain) and abs(x) < (Hregion/2 - Grain))
        var Rpsel = bnd.intersection(inner)
        Rpsel.addgrade(1)
	Show(plotselection(mesh, Rpsel, grade = [0,1,2]))
        var Rosel = bnd.difference(Rpsel)
	var LeftWallReg = Selection(mesh, fn(x,y,z) x <= -Lregion/2 + Grain)
	var RightWallReg = Selection(mesh, fn(x,y,z) x >= Lregion/2 - Grain)
        var LowerWallReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + Grain)
        var UpperWallReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - Grain)
	var LeftWall = bnd.intersection(LeftWallReg)
	var RightWall = bnd.intersection(RightWallReg)
	var LowerWall = bnd.intersection(LowerWallReg)
	var UpperWall = bnd.intersection(UpperWallReg)

	for(var i=stscale; i>=scale; i-=0.05){
		var shrinkpore = OptimizationProblem(mesh)

		// Add level set to all walls
		var topwall = ScalarPotential(fn (x,y,z) (y - Hregion/2))
		var bottomwall = ScalarPotential(fn (x,y,z) (y + Hregion/2))
		var rightwall = ScalarPotential(fn (x,y,z) (x - Lregion/2))
		var leftwall = ScalarPotential(fn (x,y,z) (x + Lregion/2))

		shrinkpore.addlocalconstraint(topwall, selection = UpperWall, target = 0)
		shrinkpore.addlocalconstraint(bottomwall, selection = LowerWall, target = 0)
		shrinkpore.addlocalconstraint(rightwall, selection = RightWall, target = 0)
		shrinkpore.addlocalconstraint(leftwall, selection = LeftWall, target = 0)

		var shrinkto = ScalarPotential(fn(x,y,z) (x^2 + y^2 - (i*eqradius(x,y))^2)^2)
		shrinkpore.addenergy(shrinkto, selection=Rpsel, prefactor = 1)
		var adapt = ProblemAdapter(shrinkpore, mesh)
		var control = PenaltyController(adapt, verbosity="quiet")	
		control.optimize(10)
		equiangulate(mesh, fix=bnd)
        }
	var vtkME = VTKExporter(mesh)
        vtkME.export(String(pathexport,"/",str,".vtk"))
        return [mesh, Rpsel]


}

for(var i=1; i>=0.1; i-=0.05){
	var ist
	if(i>=0.7){ist = i}
	if(i<0.7 and i>0.5){ist = i+0.1} 
	if(i<0.5 and i>0.3){ist = i+0.2} 
	if(i<0.3 and i>0){ist = i+0.3} 
	var gs = CreateAndSaveMesh(Lreg, Hreg, dx, "InitialMeshq=${q}s=${i}", i, ist)
	var mesh = gs[0]
}
