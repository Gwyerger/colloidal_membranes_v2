// Do Not Change Line Numbering ---------------------
import meshgen
import meshtools
import plot
import optimize
import vtk
import functionals


// Theoretical Parameters

// var Ksplay = 1
// var Kbend = 1
// var Ktwist = 1
var K = 1
var C = 2
var q = 0.55 
var gam = 0.55 
var ff = 0.1

// Region Dimensions

var dx = 0.15
var Hreg = 4
var Lreg = 12
var Rp = 0.75
var onerodlength = 0.25

// Import/Export Destination

var pathexport = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/Round8/q=0.0 g=0.5"
var pathenergies = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/CodeMega/DataAnalysis/Round8/EnergyPerIteration"
var initialmeshpath = "/home/gabriel/Desktop/ProjectFiles/ColloidalMembranes/VTKMega/Round8"

// --------------------------------------------------


fn modulus(a, b){
    return (a/b - floor(a/b))*b
}

fn CreateSelections(mesh, Lregion, Hregion, Rpore, Grain) {
    var dx = Grain
    var LeftWallReg = Selection(mesh, fn(x,y,z) x <= -Lregion/2 + dx)
    var RightWallReg = Selection(mesh, fn(x,y,z) x >= Lregion/2 - dx)
    var LowerWallReg = Selection(mesh, fn(x,y,z) y <= -Hregion/2 + dx)
    var UpperWallReg = Selection(mesh, fn(x,y,z) y >= Hregion/2 - dx)
    var bnds = Selection(mesh, boundary=true)
    bnds.addgrade(0)
    LeftWallReg.addgrade(0)
    RightWallReg.addgrade(0)
    LowerWallReg.addgrade(0)
    UpperWallReg.addgrade(0)
    var inner = Selection(mesh, fn(x,y,z) abs(x)<Lregion/2-dx and abs(y)<Hregion/2-dx)
    var lefthalf = Selection(mesh, fn(x,y,z) x<0)
    var righthalf = Selection(mesh, fn(x,y,z) x>0)
    var porebnd = bnds.intersection(inner)
    var porebndleft = porebnd.intersection(lefthalf)
    var porebndright = porebnd.intersection(righthalf)
    var LeftWall = bnds.intersection(LeftWallReg)
    var RightWall = bnds.intersection(RightWallReg)
    var LowerWall = bnds.intersection(LowerWallReg)
    var UpperWall = bnds.intersection(UpperWallReg)
    // Show(plotselection(mesh, RightWall, grade=[0,1]))
    var notporebnd = Selection(mesh, fn(x,y,z) sqrt(x^2 + y^2) > Rpore+0.5*dx)
    porebnd.addgrade(1)
    bnds.addgrade(1)
    LeftWall.addgrade(1)
    RightWall.addgrade(1)
    UpperWall.addgrade(1)
    LowerWall.addgrade(1)
    return [LeftWall, RightWall, UpperWall, LowerWall, bnds, porebnd, notporebnd, porebndleft, porebndright]
}


fn MicroscopicConstraint(mesh, director, sel1, sel2, fix1, fix2, rodlength) {
    // First: find the two points which are closest between the two selections starting at a maximum distance consideration
    var idlist1 = Matrix(sel1.idlistforgrade(0))
    var idlist2 = Matrix(sel2.idlistforgrade(0))
    var points1 = []
    var points2 = []

    for (id in idlist1) {
        points1.append(mesh.vertexposition(Int(id)))
    }

    for (id in idlist2) {
        points2.append(mesh.vertexposition(Int(id)))
    }
    var closestids
    var closestpoints
    var minimumdistance = 2*rodlength

    for (i1 in 0...idlist1.dimensions()[0]) {
        for (i2 in 0...idlist2.dimensions()[0]) {
            var difference = (points1[i1] - points2[i2]).norm()
            if (difference < minimumdistance) {
                minimumdistance = difference
                closestids = [idlist1[i1], idlist2[i2]]
                closestpoints = [points1[i1], points2[i2]]
                }     
        }
    }

    if (closestids == nil){
    return    
    }

        
    // Second: if[the two points have an average director dotted with difference unit vector greater or equal to cos(45deg)];
    //                                                                                                 (roughly, check whether the nematic phase is dominating rather than the smectic phase. We are 
    //                                                                                                  essentially assuming that the smectic phase hard-transitions to a nematic phase at 45 degrees,
    //                                                                                                  and that the nematic phase is neccesary for the twisted bridges.)
    
    
    var avgdirector = (director[0,closestids[0]] + director[0,closestids[1]])/2

    var midpoint = (closestpoints[0]+closestpoints[1])/2
    var diffvector = (closestpoints[0]-closestpoints[1])
    var diffunitvector = diffvector/(diffvector.norm())

    if ((diffvector.inner(avgdirector))^2 < (diffvector.norm())^2/2) {
    return
    }

    // Third: enforce the constraint that niether points are able to come closer to the line which bisects the two points than one half of the rod length. We will use a reassigning of vertex positions.
    
    if (diffvector.norm()<rodlength) {
    closestpoints[0] = midpoint + diffunitvector*rodlength/2
    closestpoints[1] = midpoint - diffunitvector*rodlength/2
    if (!fix1){
    mesh.setvertexposition(Int(closestids[0]), closestpoints[0])}
    if (!fix2){
    mesh.setvertexposition(Int(closestids[1]), closestpoints[1])}        
    print("microscopic run")
    diffvector = (closestpoints[0]-closestpoints[1])
    }
//    var point1sel = Selection(mesh)
//    var point2sel = Selection(mesh)
//    point1sel.setindex(0,Int(closestids[0]),true)
//    point2sel.setindex(0,Int(closestids[1]),true)
//    Show(plotselection(mesh, point1sel, grade = [0,1,2]))
//    mesh.setvertexposition(Int(closestids[1]), closestpoints[1])

    
//    var rigidrod1 = ScalarPotential(fn (x,y,z) Matrix([diffunitvector[0]*((midpoint[0]+diffunitvector[0]*rodlength/2)-x),diffunitvector[1]*((midpoint[1]+diffunitvector[1]*rodlength/2)-y), 0]),Matrix([-diffunitvector[0]*x,-diffunitvector[1]*y, 0]))
//    var rigidrod2 = ScalarPotential(fn (x,y,z) Matrix([diffunitvector[0]*((midpoint[0]-diffunitvector[0]*rodlength/2)+x),diffunitvector[1]*((midpoint[1]-diffunitvector[1]*rodlength/2)+y), 0]),Matrix([diffunitvector[0]*x,diffunitvector[1]*y, 0]))
//
    
//
//    Problem.addlocalconstraint(rigidrod1, selection=point1sel, onesided=true)
//    Problem.addlocalconstraint(rigidrod2, selection=point2sel, onesided=true)
//
}

fn EnergiesToFile(path, str, sopt, fopt) {
    var sonum = Matrix(sopt.energy).dimensions()[0]-1
    var fonum = Matrix(fopt.energy).dimensions()[0]-1
    var fs = File("${path}/${str}sopt.txt", "w")
    for (i in 0..sonum) fs.write("${sopt.energy[i]}")
    var ff = File("${path}/${str}fopt.txt", "w")
    for (i in 0..fonum) ff.write("${fopt.energy[i]}")
    fs.close()
    ff.close()
}

fn ListToFile(str, list){
    var f = File("${pathexport}/${str}.txt", "w")
    for (dat in list) f.write(dat)
    f.close()
}


 // //Initialize a field
fn AddNematicFieldEnergy(mesh, problem, Lregion, Hregion, Ksplay, Ktwist, Kbend, q, C) {
    var K = Ktwist
    var nn = Field(mesh, fn(x,y,z) Matrix([exp((y-Hregion)*sqrt(C/K)),sin(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lregion/2*sqrt(C/K))),cos(Pi/2 + Pi/2*arctan(x*sqrt(C/K))/arctan(Lregion/2*sqrt(C/K)))])/sqrt(1+exp(2*(y-Hregion)*sqrt(C/K)))) 
    var nem = Nematic(nn, ksplay = Ksplay, ktwist = Ktwist, kbend = Kbend, pitch = q)
    problem.addenergy(nem)
    return [nn, nem]
}

// For restricting the X-component locally
class XCompSquared {
    init(vec) {
        self.vec = vec
    }
    integrand(vec) {
        var int = vec.op(fn (x) x[0]^2)
        return int.linearize().transpose()
    }

    fieldgradient(vec, mesh) {
        // print vec
        var fg = vec.op(fn (x) Matrix([2*x[0], 0, 0]))
        return fg
    }

    total(vec) {
        return self.integrand(vec).sum()
    }  
}

// Add a tilt energy functional C/2*sin^2(theta)
fn tIntegrand(x, n) {                   
    return (1-(n[2])^2)
}

fn AddTiltEnergy(problem, nn, C) {
    var tilt = AreaIntegral(tIntegrand, nn) 
    problem.addenergy(tilt, prefactor = C/2)
}
fn lIntegrand(x, n){
    return (1)
}

// Add an anisotropic line tension functional
// fn lIntegrand(x, n){
//     return (1 + (1 - n.inner(tangent())^2))
// }
fn AddEdgeEnergy(problem, sel, nn, g) {
    var lten = LineIntegral(lIntegrand, nn)
    problem.addenergy(lten, selection=sel, prefactor = g)
}

fn AddPressure(problem, f) {
    problem.addenergy(Area(), prefactor=(-f))
}

fn AddConstraints(problem, reg,  UpperWall, LowerWall, LeftWall, RightWall, nn) {
    // Add a level set to keep things in the z axis
    var lcons = ScalarPotential(fn (x,y,z) z)    
    problem.addlocalconstraint(lcons)
    reg.addlocalconstraint(lcons)   

    // Add constraints to keep the pore from turning inside out (not working yet)


    // // Fully restrict nx
    // var lxcs=XCompSquared(nn)
    // problem.addlocalconstraint(lxcs, field=nn, target=0)


    // Add a functional to penalize nx
    // var xcon = LineIntegral(fn (x, n) n[0]^2, nn)
    // problem.addenergy(xcon, selection = UpperWall, prefactor = 100)
    // problem.addenergy(xcon, selection = LowerWall, prefactor = 100)

    // Unit vector constraint 
    var lnorm = NormSq(nn)                      
    problem.addlocalconstraint(lnorm, field=nn, target=1) 
}

fn CreateOptimizers(problem, reg,  mesh, LeftWall, RightWall, UpperWall, LowerWall, porebnd, nn) {

    // Create the field optimizer
    var fopt = FieldOptimizer(problem, nn)
    fopt.stepsize = 0.01
    fopt.fix(RightWall)
    fopt.fix(LeftWall)
    fopt.fix(UpperWall)
    fopt.fix(LowerWall)
    fopt.quiet = true
    fopt.etol = 5e-6
    var sopt = ShapeOptimizer(problem, mesh)   

    // sopt.quiet = true
    sopt.stepsize = 0.001
    sopt.steplimit = 0.01
    sopt.etol = 5e-6
    sopt.fix(RightWall)
    sopt.fix(LeftWall)
//    sopt.fix(UpperWall)
    sopt.fix(LowerWall)
    
    var leq = EquiElement()                     // Try to equalize elements
    reg.addenergy(leq, prefactor = 1)         

    var ropt = ShapeOptimizer(reg, mesh)
    ropt.stepsize = 0.001
    ropt.steplimit = 0.005
    ropt.fix(porebnd)
    ropt.fix(RightWall)
    ropt.fix(LeftWall)
    ropt.fix(UpperWall)
    ropt.fix(LowerWall)
    ropt.quiet=true

    return [fopt, sopt, ropt, reg]
}

fn Optimization(str, mesh, nn, ropt, fopt, sopt, lowerwall, poresel, upperwall) {
    var iterations = 300
    var vtkE = VTKExporter(nn)
    var h = 0
    vtkE.export("${pathexport}/${str}_${h}.vtk")
    var Break = false
    var A = Area()

    for (i in 0..iterations) {
        if (A.total(mesh) > Lreg*Hreg){break}
        if (i < 300){
            fopt.conjugategradient(3)
            sopt.conjugategradient(2)
            ropt.conjugategradient(3)
            MicroscopicConstraint(mesh, nn, lowerwall, poresel, true, false, onerodlength)
            MicroscopicConstraint(mesh, nn, lowerwall, poresel, true, false, onerodlength)
            MicroscopicConstraint(mesh, nn, poresel, upperwall, false, true, onerodlength)
            MicroscopicConstraint(mesh, nn, poresel, upperwall, false, true, onerodlength)
            equiangulate(mesh, quiet=true)
            ropt.conjugategradient(5)
            h=h+1
            vtkE.export("${pathexport}/${str}_${h}.vtk")
        }        
        else {
            fopt.linesearch(10)
            sopt.linesearch(10)
            if (Int(modulus(i, 5))==0) {
                ropt.conjugategradient(1)
                equiangulate(mesh, quiet=true)
                ropt.conjugategradient(1)
            }
            if (sopt.hasconverged() && fopt.hasconverged()) {
                break
            }
            
            if (Int(modulus(i, 5))==0) {
                h=h+1
                vtkE.export("${pathexport}/${str}_${h}.vtk")
            }
        }
        var sonum = Matrix(sopt.energy).dimensions()[0]-1
        var fonum = Matrix(fopt.energy).dimensions()[0]-1

        if(abs(sopt.energy[sonum]) > abs(sopt.energy[0]*100) or abs(fopt.energy[fonum]) > abs(fopt.energy[0]*100)) {
            print("Mesh Degradation")
            break
        }
        // print("sopt step: ${sopt.energy[sonum]-sopt.energy[sonum-1]}, fopt step: ${fopt.energy[fonum]-fopt.energy[fonum-1]}")
    }
}


//fn Refinement(str, mesh, nn, porebnd, LeftWall, RightWall, UpperWall, LowerWall, problem, reg, sopt, fopt, ropt, Nlevels) {
//    var vtkE = VTKExporter(nn)
//    /* Refinement */
//    for (level in 1..Nlevels) {
//        var mr = MeshRefiner([mesh, nn, porebnd, LeftWall, RightWall, UpperWall, LowerWall])
//        var refmap = mr.refine()
//
//        // Now refinement is done update the problems and optimizers
//        for (el in [problem, reg, sopt, fopt, ropt]) el.update(refmap)
//
//        // Update our references 
//        mesh = refmap[mesh]   // There are tidier ways to do this!
//        nn = refmap[nn]
//        porebnd = refmap[porebnd]
//        LeftWall = refmap[LeftWall]
//        RightWall = refmap[RightWall]
//        UpperWall = refmap[UpperWall]
//        LowerWall = refmap[LowerWall]
//        // Continue optimizing. We don't need further regularization for this particular problem
//        for (i in 1..5) {                  
//            sopt.conjugategradient(10)
//            fopt.conjugategradient(10)
//            if (sopt.hasconverged() && fopt.hasconverged()) break 
//        }
//        vtkE.export(String(str, "Refined",level,".vtk"))
//    }
//}

var str = "SinglePoreEndg${gam}f${ff}q${q}C${C}"
var vtkMI = VTKImporter(String(initialmeshpath,"/InitialMesh.vtk"))
var mesh = vtkMI.mesh()
print("/")
var Selections = CreateSelections(mesh, Lreg, Hreg, Rp, dx)
var LeftWall = Selections[0], RightWall = Selections[1], UpperWall = Selections[2], LowerWall = Selections[3], bnds = Selections[4], porebnd = Selections[5]
print("/")
var problem = OptimizationProblem(mesh)
var reg = OptimizationProblem(mesh) 
print("/")
var fe = AddNematicFieldEnergy(mesh, problem, Lreg, Hreg, K, K, K, q, C)
var nn = fe[0], nem = fe[1]
print("/")
AddTiltEnergy(problem, nn, C)
AddEdgeEnergy(problem, porebnd, nn, gam)
AddEdgeEnergy(problem, UpperWall, nn, gam)
AddPressure(problem, ff)
AddConstraints(problem, reg, UpperWall, LowerWall, LeftWall, RightWall, nn)
print("/")
var Optimizers = CreateOptimizers(problem, reg, mesh, LeftWall, RightWall, UpperWall, LowerWall, porebnd, nn)
var fopt = Optimizers[0], sopt = Optimizers[1], ropt = Optimizers[2]
print("/")
Optimization(str, mesh, nn, ropt, fopt, sopt, porebnd, UpperWall, LowerWall)
print("/")
Show(plotmesh(mesh, grade = [0,1,2]))

EnergiesToFile(pathenergies, "EnergiesItg${gam}f${ff}q${q}C${C}", sopt, fopt)


